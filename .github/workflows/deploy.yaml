name: Deploy Infra and Java App

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Environment to deploy (dev, qa, prod)'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - qa
          - prod

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-south-1
      TF_VAR_stage: ${{ github.event.inputs.stage }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Save Terraform Outputs
        id: tf_outputs
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "BUCKET_NAME=$(terraform output -raw bucket_name)" >> $GITHUB_ENV

  deploy-app:
    runs-on: ubuntu-latest
    needs: terraform-deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-south-1
      EC2_IP: ${{ env.EC2_IP }}
      BUCKET_NAME: ${{ env.BUCKET_NAME }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Add SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Create .env File for Script
        run: |
          cat <<EOF > .env
          KEY_PATH=key.pem
          SSH_USER=ubuntu
          REPO_URL=https://github.com/Trainings-TechEazy/test-repo-for-devops
          JAR_NAME=hellomvc-0.0.1-SNAPSHOT.jar
          EOF

      - name: Run Deployment Script
        run: bash ./yourscript.sh

  health-check:
    runs-on: ubuntu-latest
    needs: deploy-app
    steps:
      - name: Check App Health
        run: |
          for i in {1..5}; do
            if curl -s --head --request GET http://${{ env.EC2_IP }}/hello | grep "200 OK" > /dev/null; then
              echo "App is healthy!"
              exit 0
            fi
            echo "Retrying in 10s..."
            sleep 10
          done
          echo "App health check failed"
          exit 1
