name: Provision and Deploy

on:
  push:
    branches:
      - feature/my-change-updated
    tags:
      - 'deploy-*' # Matches deploy-dev, deploy-prod, etc.
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment stage (dev/prod)"
        required: true
        default: "dev"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-south-1
      PEM_KEY: ${{ secrets.PEM_KEY }}
      KEY_PATH_ENV: ./script/mykey.pem
      DEPLOY_STAGE: ${{ github.event.inputs.stage || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Get EC2 Public IP from Terraform output
        id: ec2_ip
        working-directory: terraform
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

      - name: Prepare SSH key
        run: |
          mkdir -p script
          echo "$PEM_KEY" > ./script/mykey.pem
          sed -i 's/\r$//' ./script/mykey.pem
          chmod 400 ./script/mykey.pem

      - name: Run Deploy Script
        working-directory: script
        run: bash deploy2.sh

      - name: Health Check - Validate Port 80 `/hello`
        run: |
          echo "Checking app health at http://${{ steps.ec2_ip.outputs.ec2_ip }}/hello ..."
          for i in {1..10}; do
            if curl -s --max-time 5 "http://${{ steps.ec2_ip.outputs.ec2_ip }}/hello" | grep -q "Hello"; then
              echo "✅ App is running at /hello!"
              exit 0
            else
              echo "Attempt $i/10 failed. Retrying in 10s..."
              sleep 10
            fi
          done
          echo "❌ App did not respond correctly at /hello."
          exit 1

      - name: Terraform Destroy (Always Run)
        if: always()
        working-directory: terraform
        run: terraform destroy -auto-approve -var="stage=${DEPLOY_STAGE}"
